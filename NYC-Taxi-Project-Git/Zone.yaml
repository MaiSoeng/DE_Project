AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template for Project NYC Taxi

Parameters:
  ProjectName:
    Type: String
    Default: project-nyc-taxi
    Description: Project name

  MainStackName:
    Type: String
    Default: Project-Taxi
    Description: Name of the main pipeline stack

Resources:
  # crawler for zones reference data
  ZoneDataCrawler:
    Type: AWS::Glue::Crawler
    Properties:
      Name: !Sub '${ProjectName}-zones-crawler'
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${ProjectName}-glue-service-role'
      DatabaseName:
        Fn::ImportValue:
          Fn::Sub: '${ProjectName}-glue-database'
      Targets:
        S3Targets:
        - Path: !Sub
            - 's3://${RawDataBucket}/reference-data/'
            - RawDataBucket:
                Fn::ImportValue:
                  Fn::Sub: '${ProjectName}-raw-data-bucket'
      SchemaChangePolicy:
        UpdateBehavior: UPDATE_IN_DATABASE
        DeleteBehavior: DEPRECATE_IN_DATABASE

  # IAM Role for lambda 
  ZoneLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-zone-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: ZoneCrawlerAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - glue:StartCrawler
            - glue:GetCrawler
            - glue:GetCrawlerMetrics
            - glue:StopCrawler
            Resource:
            - !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:crawler/${ProjectName}-zones-crawler'
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'

  # lambda function to automatically start zone crawler 
  ZoneCrawlerTriggerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-zone-crawler-trigger'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt ZoneLambdaRole.Arn
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          ZONE_CRAWLER_NAME: !Ref ZoneDataCrawler
          PROJECT_NAME: !Ref ProjectName
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import logging
          from datetime import datetime

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          glue_client = boto3.client('glue')

          def lambda_handler(event, context):
              try:
                  zone_crawler_name = os.environ['ZONE_CRAWLER_NAME']
                  
                  logger.info("Reference data upload, start zone crawler")
                  
                  # Get S3 event details
                  if 'Records' in event and event['Records']:
                      for record in event['Records']:
                          if 'eventName' in record and record['eventName'].startswith('ObjectCreated'):
                              bucket = record['s3']['bucket']['name']
                              key = record['s3']['object']['key']
                              logger.info(f"New reference file uploaded: s3://{bucket}/{key}")
                  
                  # Check if zone crawler is already running
                  try:
                      crawler_response = glue_client.get_crawler(Name = zone_crawler_name)
                      crawler_state = crawler_response['Crawler']['State']
                      
                      if crawler_state == 'RUNNING':
                          logger.info("Zone crawler is already running")
                          return {
                              'statusCode': 200,
                              'body': json.dumps(f'Zone crawler is already running')
                          }
                  except Exception as e:
                      logger.warning(f"Could not check zone crawler status: {str(e)}")
                  
                  # Start the zone crawler
                  glue_client.start_crawler(Name = zone_crawler_name)
                  logger.info(f"Successfully started zone crawler")
                  
                  return {
                      'statusCode': 200,
                      'body': json.dumps({
                          'message': f'Successfully started zone crawler'
                      })
                  }
                  
              except Exception as e:
                  logger.error(f"Error in zone crawler automation: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({
                          'error': str(e)
                      })
                  }

  # EventBridge Rule for S3 Object Creation in reference-data folder
  S3ZoneDataUploadRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${ProjectName}-zone-data-uploaded'
      Description: Trigger zone crawler when reference data is uploaded to S3
      EventPattern:
        source:
        - aws.s3
        detail-type:
        - Object Created
        detail:
          bucket:
            name:
            - Fn::ImportValue:
                Fn::Sub: '${ProjectName}-raw-data-bucket'
          object:
            key:
            - suffix: '.csv'
      State: ENABLED
      Targets:
      - Arn: !GetAtt ZoneCrawlerTriggerLambda.Arn
        Id: ZoneCrawlerTriggerTarget

  # permission for EventBridge to invoke zone crawler Lambda
  S3ZoneEventLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ZoneCrawlerTriggerLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt S3ZoneDataUploadRule.Arn

Outputs:
  ZoneCrawlerName:
    Description: Name of the Glue crawler for zone reference data
    Value: !Ref ZoneDataCrawler
    Export:
      Name: !Sub '${ProjectName}-zone-crawler-name'

  ZoneCrawlerTriggerLambda:
    Description: ARN of the zone crawler trigger Lambda function
    Value: !GetAtt ZoneCrawlerTriggerLambda.Arn
    Export:
      Name: !Sub '${ProjectName}-zone-crawler-lambda-arn'

  ZoneDataLocation:
    Description: S3 path for zone data upload
    Value: !Sub
      - 's3://${RawDataBucket}/reference-data/'
      - RawDataBucket:
          Fn::ImportValue:
            Fn::Sub: '${ProjectName}-raw-data-bucket'
